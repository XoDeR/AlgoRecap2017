Topological Sorting in a DAG
Given a directed acyclic graph (DAG), print it in Topological order. If the DAG has more than one topological ordering, print any of them.


A Topological Sort or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering. A topological ordering is possible if and only if the graph has no directed cycles, i.e. if the graph is DAG.

For example, 
  topological-order-2

The graph shown above has many valid topological ordering of vertices like,

5, 7, 3, 1, 0, 2, 6, 4
3, 5, 7, 0, 1, 2, 6, 4
5, 7, 3, 0, 1, 4, 6, 2
7, 5, 1, 3, 4, 0, 6, 2
5, 7, 1, 2, 3, 0, 6, 4
3, 7, 0, 5, 1, 4, 2, 6
etc.

Note that for every directed edge u -> v, u comes before v in the ordering.
  topological-order-1

Related Posts –
Types of edges involved in DFS and relation between them
Arrival and Departure Time of Vertices in DFS

We can use DFS to solve this problem. The idea is to order the vertices in order of their decreasing departure time in DFS and we will get our desired topological sort.

How does this work?

We have already discussed about the relationship between all four types of edges involved in the DFS in the previous post. Below are the relation we have seen between the departure time for different types of edges involved in a DFS of directed graph –


Tree edge (u, v): departure[u] > departure[v]
Back edge (u, v): departure[u] < departure[v] Forward edge (u, v): departure[u] > departure[v]
Cross edge (u, v): departure[u] > departure[v]

As we can see that for a tree edge, forward edge or cross edge (u, v), departure[u] > departure[v]. But only for back edge the relationship departure[u] < departure[v] is true. So it is guaranteed that if an edge (u, v) has departure[u] > departure[v], it is not a back-edge.

We know that in DAG no back-edge is present. So if we order the vertices in order of their decreasing departure time, we will get topological order of graph (every edge going from left to right).

  Types of edges involved in DFS and relation between them

Output: 

7 5 3 1 4 2 0 6

Time complexity of above solutions is O(n + m) where n is number of vertices and e is number of edges in the graph.