Sort binary array in linear time
Given an binary array, sort it in linear time and constant space. Output should print contain all zeroes followed by all ones.


For example,

Input: { 1, 0, 1, 0, 1, 0, 0, 1 }
Output: { 0, 0, 0, 0, 1, 1, 1, 1 }
 

 
Simple solution would be to count number of 0’s present in the array (say k) and fill first k indexes in the array by 0 and all remaining indexes by 1.

Alternatively, we can also count number of 1’s present in the array (say k) and fill last k indexes in the array by 1 and all remaining indexes by 0.

Output: 

0 0 0 0 0 0 1 1 1 1

 
The time complexity of above solution is O(n) and auxiliary space used by the program is O(1).
 
 
Instead of counting number of zeroes, if the current element is 0, we can place 0 at next available position in the array. After all elements in the array are processed, we fill all remaining indexes by 1.

Output: 

0 0 0 0 0 0 1 1 1 1

 
The time complexity of above solution is O(n) and auxiliary space used by the program is O(1).
 
 
We can also solve this problem in linear time by using partitioning logic of quicksort. The idea is to use 1 as pivot element and make one pass of partition process. The resultant array will be sorted.

Output: 

0 0 0 0 1 1 1 1

 
The time complexity of above solution is O(n) and auxiliary space used by the program is O(1).